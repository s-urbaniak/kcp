//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	apiresourcev1alpha1 "github.com/kcp-dev/kcp/pkg/apis/apiresource/v1alpha1"
	scopedclientset "github.com/kcp-dev/kcp/pkg/client/clientset/versioned"
	clientset "github.com/kcp-dev/kcp/pkg/client/clientset/versioned/cluster"
	"github.com/kcp-dev/kcp/pkg/client/informers/externalversions/internalinterfaces"
	apiresourcev1alpha1listers "github.com/kcp-dev/kcp/pkg/client/listers/apiresource/v1alpha1"
)

// APIResourceImportClusterInformer provides access to a shared informer and lister for
// APIResourceImports.
type APIResourceImportClusterInformer interface {
	Cluster(logicalcluster.Name) APIResourceImportInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() apiresourcev1alpha1listers.APIResourceImportClusterLister
}

type aPIResourceImportClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewAPIResourceImportClusterInformer constructs a new informer for APIResourceImport type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewAPIResourceImportClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredAPIResourceImportClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredAPIResourceImportClusterInformer constructs a new informer for APIResourceImport type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredAPIResourceImportClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ApiresourceV1alpha1().APIResourceImports().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ApiresourceV1alpha1().APIResourceImports().Watch(context.TODO(), options)
			},
		},
		&apiresourcev1alpha1.APIResourceImport{},
		resyncPeriod,
		indexers,
	)
}

func (f *aPIResourceImportClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredAPIResourceImportClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *aPIResourceImportClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&apiresourcev1alpha1.APIResourceImport{}, f.defaultInformer)
}

func (f *aPIResourceImportClusterInformer) Lister() apiresourcev1alpha1listers.APIResourceImportClusterLister {
	return apiresourcev1alpha1listers.NewAPIResourceImportClusterLister(f.Informer().GetIndexer())
}

// APIResourceImportInformer provides access to a shared informer and lister for
// APIResourceImports.
type APIResourceImportInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() apiresourcev1alpha1listers.APIResourceImportLister
}

func (f *aPIResourceImportClusterInformer) Cluster(clusterName logicalcluster.Name) APIResourceImportInformer {
	return &aPIResourceImportInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type aPIResourceImportInformer struct {
	informer cache.SharedIndexInformer
	lister   apiresourcev1alpha1listers.APIResourceImportLister
}

func (f *aPIResourceImportInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *aPIResourceImportInformer) Lister() apiresourcev1alpha1listers.APIResourceImportLister {
	return f.lister
}

type aPIResourceImportScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *aPIResourceImportScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&apiresourcev1alpha1.APIResourceImport{}, f.defaultInformer)
}

func (f *aPIResourceImportScopedInformer) Lister() apiresourcev1alpha1listers.APIResourceImportLister {
	return apiresourcev1alpha1listers.NewAPIResourceImportLister(f.Informer().GetIndexer())
}

// NewAPIResourceImportInformer constructs a new informer for APIResourceImport type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewAPIResourceImportInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredAPIResourceImportInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredAPIResourceImportInformer constructs a new informer for APIResourceImport type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredAPIResourceImportInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ApiresourceV1alpha1().APIResourceImports().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ApiresourceV1alpha1().APIResourceImports().Watch(context.TODO(), options)
			},
		},
		&apiresourcev1alpha1.APIResourceImport{},
		resyncPeriod,
		indexers,
	)
}

func (f *aPIResourceImportScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredAPIResourceImportInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
