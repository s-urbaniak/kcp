//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	apiresourcev1alpha1 "github.com/kcp-dev/kcp/pkg/apis/apiresource/v1alpha1"
	scopedclientset "github.com/kcp-dev/kcp/pkg/client/clientset/versioned"
	clientset "github.com/kcp-dev/kcp/pkg/client/clientset/versioned/cluster"
	"github.com/kcp-dev/kcp/pkg/client/informers/externalversions/internalinterfaces"
	apiresourcev1alpha1listers "github.com/kcp-dev/kcp/pkg/client/listers/apiresource/v1alpha1"
)

// NegotiatedAPIResourceClusterInformer provides access to a shared informer and lister for
// NegotiatedAPIResources.
type NegotiatedAPIResourceClusterInformer interface {
	Cluster(logicalcluster.Name) NegotiatedAPIResourceInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() apiresourcev1alpha1listers.NegotiatedAPIResourceClusterLister
}

type negotiatedAPIResourceClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewNegotiatedAPIResourceClusterInformer constructs a new informer for NegotiatedAPIResource type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewNegotiatedAPIResourceClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredNegotiatedAPIResourceClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredNegotiatedAPIResourceClusterInformer constructs a new informer for NegotiatedAPIResource type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredNegotiatedAPIResourceClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ApiresourceV1alpha1().NegotiatedAPIResources().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ApiresourceV1alpha1().NegotiatedAPIResources().Watch(context.TODO(), options)
			},
		},
		&apiresourcev1alpha1.NegotiatedAPIResource{},
		resyncPeriod,
		indexers,
	)
}

func (f *negotiatedAPIResourceClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredNegotiatedAPIResourceClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *negotiatedAPIResourceClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&apiresourcev1alpha1.NegotiatedAPIResource{}, f.defaultInformer)
}

func (f *negotiatedAPIResourceClusterInformer) Lister() apiresourcev1alpha1listers.NegotiatedAPIResourceClusterLister {
	return apiresourcev1alpha1listers.NewNegotiatedAPIResourceClusterLister(f.Informer().GetIndexer())
}

// NegotiatedAPIResourceInformer provides access to a shared informer and lister for
// NegotiatedAPIResources.
type NegotiatedAPIResourceInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() apiresourcev1alpha1listers.NegotiatedAPIResourceLister
}

func (f *negotiatedAPIResourceClusterInformer) Cluster(clusterName logicalcluster.Name) NegotiatedAPIResourceInformer {
	return &negotiatedAPIResourceInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type negotiatedAPIResourceInformer struct {
	informer cache.SharedIndexInformer
	lister   apiresourcev1alpha1listers.NegotiatedAPIResourceLister
}

func (f *negotiatedAPIResourceInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *negotiatedAPIResourceInformer) Lister() apiresourcev1alpha1listers.NegotiatedAPIResourceLister {
	return f.lister
}

type negotiatedAPIResourceScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *negotiatedAPIResourceScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&apiresourcev1alpha1.NegotiatedAPIResource{}, f.defaultInformer)
}

func (f *negotiatedAPIResourceScopedInformer) Lister() apiresourcev1alpha1listers.NegotiatedAPIResourceLister {
	return apiresourcev1alpha1listers.NewNegotiatedAPIResourceLister(f.Informer().GetIndexer())
}

// NewNegotiatedAPIResourceInformer constructs a new informer for NegotiatedAPIResource type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewNegotiatedAPIResourceInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredNegotiatedAPIResourceInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredNegotiatedAPIResourceInformer constructs a new informer for NegotiatedAPIResource type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredNegotiatedAPIResourceInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ApiresourceV1alpha1().NegotiatedAPIResources().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ApiresourceV1alpha1().NegotiatedAPIResources().Watch(context.TODO(), options)
			},
		},
		&apiresourcev1alpha1.NegotiatedAPIResource{},
		resyncPeriod,
		indexers,
	)
}

func (f *negotiatedAPIResourceScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredNegotiatedAPIResourceInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
