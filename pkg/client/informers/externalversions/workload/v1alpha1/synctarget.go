//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	workloadv1alpha1 "github.com/kcp-dev/kcp/pkg/apis/workload/v1alpha1"
	scopedclientset "github.com/kcp-dev/kcp/pkg/client/clientset/versioned"
	clientset "github.com/kcp-dev/kcp/pkg/client/clientset/versioned/cluster"
	"github.com/kcp-dev/kcp/pkg/client/informers/externalversions/internalinterfaces"
	workloadv1alpha1listers "github.com/kcp-dev/kcp/pkg/client/listers/workload/v1alpha1"
)

// SyncTargetClusterInformer provides access to a shared informer and lister for
// SyncTargets.
type SyncTargetClusterInformer interface {
	Cluster(logicalcluster.Name) SyncTargetInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() workloadv1alpha1listers.SyncTargetClusterLister
}

type syncTargetClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewSyncTargetClusterInformer constructs a new informer for SyncTarget type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewSyncTargetClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredSyncTargetClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredSyncTargetClusterInformer constructs a new informer for SyncTarget type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredSyncTargetClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().SyncTargets().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().SyncTargets().Watch(context.TODO(), options)
			},
		},
		&workloadv1alpha1.SyncTarget{},
		resyncPeriod,
		indexers,
	)
}

func (f *syncTargetClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredSyncTargetClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *syncTargetClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&workloadv1alpha1.SyncTarget{}, f.defaultInformer)
}

func (f *syncTargetClusterInformer) Lister() workloadv1alpha1listers.SyncTargetClusterLister {
	return workloadv1alpha1listers.NewSyncTargetClusterLister(f.Informer().GetIndexer())
}

// SyncTargetInformer provides access to a shared informer and lister for
// SyncTargets.
type SyncTargetInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() workloadv1alpha1listers.SyncTargetLister
}

func (f *syncTargetClusterInformer) Cluster(clusterName logicalcluster.Name) SyncTargetInformer {
	return &syncTargetInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type syncTargetInformer struct {
	informer cache.SharedIndexInformer
	lister   workloadv1alpha1listers.SyncTargetLister
}

func (f *syncTargetInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *syncTargetInformer) Lister() workloadv1alpha1listers.SyncTargetLister {
	return f.lister
}

type syncTargetScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *syncTargetScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&workloadv1alpha1.SyncTarget{}, f.defaultInformer)
}

func (f *syncTargetScopedInformer) Lister() workloadv1alpha1listers.SyncTargetLister {
	return workloadv1alpha1listers.NewSyncTargetLister(f.Informer().GetIndexer())
}

// NewSyncTargetInformer constructs a new informer for SyncTarget type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewSyncTargetInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredSyncTargetInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredSyncTargetInformer constructs a new informer for SyncTarget type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredSyncTargetInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().SyncTargets().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WorkloadV1alpha1().SyncTargets().Watch(context.TODO(), options)
			},
		},
		&workloadv1alpha1.SyncTarget{},
		resyncPeriod,
		indexers,
	)
}

func (f *syncTargetScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredSyncTargetInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
