//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	tenancyv1alpha1 "github.com/kcp-dev/kcp/pkg/apis/tenancy/v1alpha1"
	scopedclientset "github.com/kcp-dev/kcp/pkg/client/clientset/versioned"
	clientset "github.com/kcp-dev/kcp/pkg/client/clientset/versioned/cluster"
	"github.com/kcp-dev/kcp/pkg/client/informers/externalversions/internalinterfaces"
	tenancyv1alpha1listers "github.com/kcp-dev/kcp/pkg/client/listers/tenancy/v1alpha1"
)

// ClusterWorkspaceShardClusterInformer provides access to a shared informer and lister for
// ClusterWorkspaceShards.
type ClusterWorkspaceShardClusterInformer interface {
	Cluster(logicalcluster.Name) ClusterWorkspaceShardInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() tenancyv1alpha1listers.ClusterWorkspaceShardClusterLister
}

type clusterWorkspaceShardClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewClusterWorkspaceShardClusterInformer constructs a new informer for ClusterWorkspaceShard type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClusterWorkspaceShardClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredClusterWorkspaceShardClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredClusterWorkspaceShardClusterInformer constructs a new informer for ClusterWorkspaceShard type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClusterWorkspaceShardClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TenancyV1alpha1().ClusterWorkspaceShards().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TenancyV1alpha1().ClusterWorkspaceShards().Watch(context.TODO(), options)
			},
		},
		&tenancyv1alpha1.ClusterWorkspaceShard{},
		resyncPeriod,
		indexers,
	)
}

func (f *clusterWorkspaceShardClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredClusterWorkspaceShardClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *clusterWorkspaceShardClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&tenancyv1alpha1.ClusterWorkspaceShard{}, f.defaultInformer)
}

func (f *clusterWorkspaceShardClusterInformer) Lister() tenancyv1alpha1listers.ClusterWorkspaceShardClusterLister {
	return tenancyv1alpha1listers.NewClusterWorkspaceShardClusterLister(f.Informer().GetIndexer())
}

// ClusterWorkspaceShardInformer provides access to a shared informer and lister for
// ClusterWorkspaceShards.
type ClusterWorkspaceShardInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() tenancyv1alpha1listers.ClusterWorkspaceShardLister
}

func (f *clusterWorkspaceShardClusterInformer) Cluster(clusterName logicalcluster.Name) ClusterWorkspaceShardInformer {
	return &clusterWorkspaceShardInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type clusterWorkspaceShardInformer struct {
	informer cache.SharedIndexInformer
	lister   tenancyv1alpha1listers.ClusterWorkspaceShardLister
}

func (f *clusterWorkspaceShardInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *clusterWorkspaceShardInformer) Lister() tenancyv1alpha1listers.ClusterWorkspaceShardLister {
	return f.lister
}

type clusterWorkspaceShardScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *clusterWorkspaceShardScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&tenancyv1alpha1.ClusterWorkspaceShard{}, f.defaultInformer)
}

func (f *clusterWorkspaceShardScopedInformer) Lister() tenancyv1alpha1listers.ClusterWorkspaceShardLister {
	return tenancyv1alpha1listers.NewClusterWorkspaceShardLister(f.Informer().GetIndexer())
}

// NewClusterWorkspaceShardInformer constructs a new informer for ClusterWorkspaceShard type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClusterWorkspaceShardInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredClusterWorkspaceShardInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredClusterWorkspaceShardInformer constructs a new informer for ClusterWorkspaceShard type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClusterWorkspaceShardInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TenancyV1alpha1().ClusterWorkspaceShards().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TenancyV1alpha1().ClusterWorkspaceShards().Watch(context.TODO(), options)
			},
		},
		&tenancyv1alpha1.ClusterWorkspaceShard{},
		resyncPeriod,
		indexers,
	)
}

func (f *clusterWorkspaceShardScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredClusterWorkspaceShardInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
