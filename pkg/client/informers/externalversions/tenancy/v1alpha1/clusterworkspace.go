//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	tenancyv1alpha1 "github.com/kcp-dev/kcp/pkg/apis/tenancy/v1alpha1"
	scopedclientset "github.com/kcp-dev/kcp/pkg/client/clientset/versioned"
	clientset "github.com/kcp-dev/kcp/pkg/client/clientset/versioned/cluster"
	"github.com/kcp-dev/kcp/pkg/client/informers/externalversions/internalinterfaces"
	tenancyv1alpha1listers "github.com/kcp-dev/kcp/pkg/client/listers/tenancy/v1alpha1"
)

// ClusterWorkspaceClusterInformer provides access to a shared informer and lister for
// ClusterWorkspaces.
type ClusterWorkspaceClusterInformer interface {
	Cluster(logicalcluster.Name) ClusterWorkspaceInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() tenancyv1alpha1listers.ClusterWorkspaceClusterLister
}

type clusterWorkspaceClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewClusterWorkspaceClusterInformer constructs a new informer for ClusterWorkspace type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClusterWorkspaceClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredClusterWorkspaceClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredClusterWorkspaceClusterInformer constructs a new informer for ClusterWorkspace type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClusterWorkspaceClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TenancyV1alpha1().ClusterWorkspaces().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TenancyV1alpha1().ClusterWorkspaces().Watch(context.TODO(), options)
			},
		},
		&tenancyv1alpha1.ClusterWorkspace{},
		resyncPeriod,
		indexers,
	)
}

func (f *clusterWorkspaceClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredClusterWorkspaceClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *clusterWorkspaceClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&tenancyv1alpha1.ClusterWorkspace{}, f.defaultInformer)
}

func (f *clusterWorkspaceClusterInformer) Lister() tenancyv1alpha1listers.ClusterWorkspaceClusterLister {
	return tenancyv1alpha1listers.NewClusterWorkspaceClusterLister(f.Informer().GetIndexer())
}

// ClusterWorkspaceInformer provides access to a shared informer and lister for
// ClusterWorkspaces.
type ClusterWorkspaceInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() tenancyv1alpha1listers.ClusterWorkspaceLister
}

func (f *clusterWorkspaceClusterInformer) Cluster(clusterName logicalcluster.Name) ClusterWorkspaceInformer {
	return &clusterWorkspaceInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type clusterWorkspaceInformer struct {
	informer cache.SharedIndexInformer
	lister   tenancyv1alpha1listers.ClusterWorkspaceLister
}

func (f *clusterWorkspaceInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *clusterWorkspaceInformer) Lister() tenancyv1alpha1listers.ClusterWorkspaceLister {
	return f.lister
}

type clusterWorkspaceScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *clusterWorkspaceScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&tenancyv1alpha1.ClusterWorkspace{}, f.defaultInformer)
}

func (f *clusterWorkspaceScopedInformer) Lister() tenancyv1alpha1listers.ClusterWorkspaceLister {
	return tenancyv1alpha1listers.NewClusterWorkspaceLister(f.Informer().GetIndexer())
}

// NewClusterWorkspaceInformer constructs a new informer for ClusterWorkspace type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClusterWorkspaceInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredClusterWorkspaceInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredClusterWorkspaceInformer constructs a new informer for ClusterWorkspace type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClusterWorkspaceInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TenancyV1alpha1().ClusterWorkspaces().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TenancyV1alpha1().ClusterWorkspaces().Watch(context.TODO(), options)
			},
		},
		&tenancyv1alpha1.ClusterWorkspace{},
		resyncPeriod,
		indexers,
	)
}

func (f *clusterWorkspaceScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredClusterWorkspaceInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
