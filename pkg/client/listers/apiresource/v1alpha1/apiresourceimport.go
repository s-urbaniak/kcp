//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	apiresourcev1alpha1 "github.com/kcp-dev/kcp/pkg/apis/apiresource/v1alpha1"
)

// APIResourceImportClusterLister can list APIResourceImports across all workspaces, or scope down to a APIResourceImportLister for one workspace.
// All objects returned here must be treated as read-only.
type APIResourceImportClusterLister interface {
	// List lists all APIResourceImports in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*apiresourcev1alpha1.APIResourceImport, err error)
	// Cluster returns a lister that can list and get APIResourceImports in one workspace.
	Cluster(clusterName logicalcluster.Name) APIResourceImportLister
	APIResourceImportClusterListerExpansion
}

type aPIResourceImportClusterLister struct {
	indexer cache.Indexer
}

// NewAPIResourceImportClusterLister returns a new APIResourceImportClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewAPIResourceImportClusterLister(indexer cache.Indexer) *aPIResourceImportClusterLister {
	return &aPIResourceImportClusterLister{indexer: indexer}
}

// List lists all APIResourceImports in the indexer across all workspaces.
func (s *aPIResourceImportClusterLister) List(selector labels.Selector) (ret []*apiresourcev1alpha1.APIResourceImport, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*apiresourcev1alpha1.APIResourceImport))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get APIResourceImports.
func (s *aPIResourceImportClusterLister) Cluster(clusterName logicalcluster.Name) APIResourceImportLister {
	return &aPIResourceImportLister{indexer: s.indexer, clusterName: clusterName}
}

// APIResourceImportLister can list all APIResourceImports, or get one in particular.
// All objects returned here must be treated as read-only.
type APIResourceImportLister interface {
	// List lists all APIResourceImports in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*apiresourcev1alpha1.APIResourceImport, err error)
	// Get retrieves the APIResourceImport from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*apiresourcev1alpha1.APIResourceImport, error)
	APIResourceImportListerExpansion
}

// aPIResourceImportLister can list all APIResourceImports inside a workspace.
type aPIResourceImportLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all APIResourceImports in the indexer for a workspace.
func (s *aPIResourceImportLister) List(selector labels.Selector) (ret []*apiresourcev1alpha1.APIResourceImport, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*apiresourcev1alpha1.APIResourceImport))
	})
	return ret, err
}

// Get retrieves the APIResourceImport from the indexer for a given workspace and name.
func (s *aPIResourceImportLister) Get(name string) (*apiresourcev1alpha1.APIResourceImport, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(apiresourcev1alpha1.Resource("APIResourceImport"), name)
	}
	return obj.(*apiresourcev1alpha1.APIResourceImport), nil
}

// NewAPIResourceImportLister returns a new APIResourceImportLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewAPIResourceImportLister(indexer cache.Indexer) *aPIResourceImportScopedLister {
	return &aPIResourceImportScopedLister{indexer: indexer}
}

// aPIResourceImportScopedLister can list all APIResourceImports inside a workspace.
type aPIResourceImportScopedLister struct {
	indexer cache.Indexer
}

// List lists all APIResourceImports in the indexer for a workspace.
func (s *aPIResourceImportScopedLister) List(selector labels.Selector) (ret []*apiresourcev1alpha1.APIResourceImport, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*apiresourcev1alpha1.APIResourceImport))
	})
	return ret, err
}

// Get retrieves the APIResourceImport from the indexer for a given workspace and name.
func (s *aPIResourceImportScopedLister) Get(name string) (*apiresourcev1alpha1.APIResourceImport, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(apiresourcev1alpha1.Resource("APIResourceImport"), name)
	}
	return obj.(*apiresourcev1alpha1.APIResourceImport), nil
}
