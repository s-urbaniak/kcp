//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	schedulingv1alpha1 "github.com/kcp-dev/kcp/pkg/apis/scheduling/v1alpha1"
)

// LocationClusterLister can list Locations across all workspaces, or scope down to a LocationLister for one workspace.
// All objects returned here must be treated as read-only.
type LocationClusterLister interface {
	// List lists all Locations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*schedulingv1alpha1.Location, err error)
	// Cluster returns a lister that can list and get Locations in one workspace.
	Cluster(clusterName logicalcluster.Name) LocationLister
	LocationClusterListerExpansion
}

type locationClusterLister struct {
	indexer cache.Indexer
}

// NewLocationClusterLister returns a new LocationClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewLocationClusterLister(indexer cache.Indexer) *locationClusterLister {
	return &locationClusterLister{indexer: indexer}
}

// List lists all Locations in the indexer across all workspaces.
func (s *locationClusterLister) List(selector labels.Selector) (ret []*schedulingv1alpha1.Location, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*schedulingv1alpha1.Location))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get Locations.
func (s *locationClusterLister) Cluster(clusterName logicalcluster.Name) LocationLister {
	return &locationLister{indexer: s.indexer, clusterName: clusterName}
}

// LocationLister can list all Locations, or get one in particular.
// All objects returned here must be treated as read-only.
type LocationLister interface {
	// List lists all Locations in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*schedulingv1alpha1.Location, err error)
	// Get retrieves the Location from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*schedulingv1alpha1.Location, error)
	LocationListerExpansion
}

// locationLister can list all Locations inside a workspace.
type locationLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all Locations in the indexer for a workspace.
func (s *locationLister) List(selector labels.Selector) (ret []*schedulingv1alpha1.Location, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*schedulingv1alpha1.Location))
	})
	return ret, err
}

// Get retrieves the Location from the indexer for a given workspace and name.
func (s *locationLister) Get(name string) (*schedulingv1alpha1.Location, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(schedulingv1alpha1.Resource("Location"), name)
	}
	return obj.(*schedulingv1alpha1.Location), nil
}

// NewLocationLister returns a new LocationLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewLocationLister(indexer cache.Indexer) *locationScopedLister {
	return &locationScopedLister{indexer: indexer}
}

// locationScopedLister can list all Locations inside a workspace.
type locationScopedLister struct {
	indexer cache.Indexer
}

// List lists all Locations in the indexer for a workspace.
func (s *locationScopedLister) List(selector labels.Selector) (ret []*schedulingv1alpha1.Location, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*schedulingv1alpha1.Location))
	})
	return ret, err
}

// Get retrieves the Location from the indexer for a given workspace and name.
func (s *locationScopedLister) Get(name string) (*schedulingv1alpha1.Location, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(schedulingv1alpha1.Resource("Location"), name)
	}
	return obj.(*schedulingv1alpha1.Location), nil
}
